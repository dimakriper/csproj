/* 
 * Maps Booking Partners API
 *
 * # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test BookingsBookingIdDelete
        /// </summary>
        [Test]
        public void BookingsBookingIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string bookingId = null;
            //instance.BookingsBookingIdDelete(bookingId);
            
        }
        /// <summary>
        /// Test BookingsBookingIdGet
        /// </summary>
        [Test]
        public void BookingsBookingIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string bookingId = null;
            //var response = instance.BookingsBookingIdGet(bookingId);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        /// <summary>
        /// Test BookingsBookingIdPut
        /// </summary>
        [Test]
        public void BookingsBookingIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BookingUpdate body = null;
            //string bookingId = null;
            //var response = instance.BookingsBookingIdPut(body, bookingId);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        /// <summary>
        /// Test BookingsPost
        /// </summary>
        [Test]
        public void BookingsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BookingsBody body = null;
            //var response = instance.BookingsPost(body);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        /// <summary>
        /// Test CompaniesCompanyIdAvailableDatesGet
        /// </summary>
        [Test]
        public void CompaniesCompanyIdAvailableDatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //List<string> serviceIds = null;
            //string from = null;
            //string to = null;
            //string resourceId = null;
            //var response = instance.CompaniesCompanyIdAvailableDatesGet(companyId, serviceIds, from, to, resourceId);
            //Assert.IsInstanceOf<InlineResponse2004> (response, "response is InlineResponse2004");
        }
        /// <summary>
        /// Test CompaniesCompanyIdAvailableTimeSlotsGet
        /// </summary>
        [Test]
        public void CompaniesCompanyIdAvailableTimeSlotsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //List<string> serviceIds = null;
            //string date = null;
            //string resourceId = null;
            //var response = instance.CompaniesCompanyIdAvailableTimeSlotsGet(companyId, serviceIds, date, resourceId);
            //Assert.IsInstanceOf<InlineResponse2005> (response, "response is InlineResponse2005");
        }
        /// <summary>
        /// Test CompaniesCompanyIdResourcesGet
        /// </summary>
        [Test]
        public void CompaniesCompanyIdResourcesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //List<string> serviceIds = null;
            //var response = instance.CompaniesCompanyIdResourcesGet(companyId, serviceIds);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        /// <summary>
        /// Test CompaniesCompanyIdResourcesResourceIdReviewsGet
        /// </summary>
        [Test]
        public void CompaniesCompanyIdResourcesResourceIdReviewsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string resourceId = null;
            //var response = instance.CompaniesCompanyIdResourcesResourceIdReviewsGet(companyId, resourceId);
            //Assert.IsInstanceOf<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        /// <summary>
        /// Test CompaniesCompanyIdServicesGet
        /// </summary>
        [Test]
        public void CompaniesCompanyIdServicesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string resourceId = null;
            //var response = instance.CompaniesCompanyIdServicesGet(companyId, resourceId);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        /// <summary>
        /// Test CompaniesFeedGet
        /// </summary>
        [Test]
        public void CompaniesFeedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CompaniesFeedGet();
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        /// <summary>
        /// Test PrebookingsPost
        /// </summary>
        [Test]
        public void PrebookingsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PrebookingsBody body = null;
            //var response = instance.PrebookingsPost(body);
            //Assert.IsInstanceOf<InlineResponse2007> (response, "response is InlineResponse2007");
        }
        /// <summary>
        /// Test PrebookingsPrebookingIdDelete
        /// </summary>
        [Test]
        public void PrebookingsPrebookingIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string prebookingId = null;
            //instance.PrebookingsPrebookingIdDelete(prebookingId);
            
        }
    }

}
