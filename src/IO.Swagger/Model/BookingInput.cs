/* 
 * Maps Booking Partners API
 *
 * # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// BookingInput
    /// </summary>
    [DataContract]
        public partial class BookingInput :  IEquatable<BookingInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingInput" /> class.
        /// </summary>
        /// <param name="companyId">companyId (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="comment">comment.</param>
        /// <param name="appointment">appointment (required).</param>
        /// <param name="prebookingId">Идентификатор предварительной брони..</param>
        public BookingInput(string companyId = default(string), UserInfo user = default(UserInfo), string comment = default(string), Appointment appointment = default(Appointment), string prebookingId = default(string))
        {
            // to ensure "companyId" is required (not null)
            if (companyId == null)
            {
                throw new InvalidDataException("companyId is a required property for BookingInput and cannot be null");
            }
            else
            {
                this.CompanyId = companyId;
            }
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for BookingInput and cannot be null");
            }
            else
            {
                this.User = user;
            }
            // to ensure "appointment" is required (not null)
            if (appointment == null)
            {
                throw new InvalidDataException("appointment is a required property for BookingInput and cannot be null");
            }
            else
            {
                this.Appointment = appointment;
            }
            this.Comment = comment;
            this.PrebookingId = prebookingId;
        }
        
        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public string CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserInfo User { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Appointment
        /// </summary>
        [DataMember(Name="appointment", EmitDefaultValue=false)]
        public Appointment Appointment { get; set; }

        /// <summary>
        /// Идентификатор предварительной брони.
        /// </summary>
        /// <value>Идентификатор предварительной брони.</value>
        [DataMember(Name="prebookingId", EmitDefaultValue=false)]
        public string PrebookingId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BookingInput {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Appointment: ").Append(Appointment).Append("\n");
            sb.Append("  PrebookingId: ").Append(PrebookingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookingInput);
        }

        /// <summary>
        /// Returns true if BookingInput instances are equal
        /// </summary>
        /// <param name="input">Instance of BookingInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Appointment == input.Appointment ||
                    (this.Appointment != null &&
                    this.Appointment.Equals(input.Appointment))
                ) && 
                (
                    this.PrebookingId == input.PrebookingId ||
                    (this.PrebookingId != null &&
                    this.PrebookingId.Equals(input.PrebookingId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyId != null)
                    hashCode = hashCode * 59 + this.CompanyId.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Appointment != null)
                    hashCode = hashCode * 59 + this.Appointment.GetHashCode();
                if (this.PrebookingId != null)
                    hashCode = hashCode * 59 + this.PrebookingId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
