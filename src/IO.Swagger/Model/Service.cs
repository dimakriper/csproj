/* 
 * Maps Booking Partners API
 *
 * # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Service
    /// </summary>
    [DataContract]
        public partial class Service :  IEquatable<Service>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Service" /> class.
        /// </summary>
        /// <param name="id">Уникальный идентификатор услуги (required).</param>
        /// <param name="title">Название услуги (required).</param>
        /// <param name="description">Подробное описание услуги.</param>
        /// <param name="category">Категория услуги. Услуги с одинаковым значением в этом поле объединяются в одну группу..</param>
        /// <param name="image">image.</param>
        /// <param name="price">price.</param>
        /// <param name="durationSeconds">Продолжительность услуги в секундах..</param>
        /// <param name="resources">Список ресурсов, связанных с данной услугой. В сфере &#x27;Красота&#x27;: список мастеров, которые оказывают услугу.</param>
        public Service(string id = default(string), OneOfServiceTitle title = default(OneOfServiceTitle), OneOfServiceDescription description = default(OneOfServiceDescription), OneOfServiceCategory category = default(OneOfServiceCategory), string image = default(string), ServicePrice price = default(ServicePrice), decimal? durationSeconds = default(decimal?), List<ServiceResources> resources = default(List<ServiceResources>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Service and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Service and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            this.Description = description;
            this.Category = category;
            this.Image = image;
            this.Price = price;
            this.DurationSeconds = durationSeconds;
            this.Resources = resources;
        }
        
        /// <summary>
        /// Уникальный идентификатор услуги
        /// </summary>
        /// <value>Уникальный идентификатор услуги</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Название услуги
        /// </summary>
        /// <value>Название услуги</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public OneOfServiceTitle Title { get; set; }

        /// <summary>
        /// Подробное описание услуги
        /// </summary>
        /// <value>Подробное описание услуги</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public OneOfServiceDescription Description { get; set; }

        /// <summary>
        /// Категория услуги. Услуги с одинаковым значением в этом поле объединяются в одну группу.
        /// </summary>
        /// <value>Категория услуги. Услуги с одинаковым значением в этом поле объединяются в одну группу.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public OneOfServiceCategory Category { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public ServicePrice Price { get; set; }

        /// <summary>
        /// Продолжительность услуги в секундах.
        /// </summary>
        /// <value>Продолжительность услуги в секундах.</value>
        [DataMember(Name="durationSeconds", EmitDefaultValue=false)]
        public decimal? DurationSeconds { get; set; }

        /// <summary>
        /// Список ресурсов, связанных с данной услугой. В сфере &#x27;Красота&#x27;: список мастеров, которые оказывают услугу
        /// </summary>
        /// <value>Список ресурсов, связанных с данной услугой. В сфере &#x27;Красота&#x27;: список мастеров, которые оказывают услугу</value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<ServiceResources> Resources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Service {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  DurationSeconds: ").Append(DurationSeconds).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Service);
        }

        /// <summary>
        /// Returns true if Service instances are equal
        /// </summary>
        /// <param name="input">Instance of Service to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Service input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.DurationSeconds == input.DurationSeconds ||
                    (this.DurationSeconds != null &&
                    this.DurationSeconds.Equals(input.DurationSeconds))
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.DurationSeconds != null)
                    hashCode = hashCode * 59 + this.DurationSeconds.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
