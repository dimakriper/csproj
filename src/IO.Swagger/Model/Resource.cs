/* 
 * Maps Booking Partners API
 *
 * # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Resource
    /// </summary>
    [DataContract]
        public partial class Resource :  IEquatable<Resource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Resource" /> class.
        /// </summary>
        /// <param name="id">Уникальный идентификатор ресурса (required).</param>
        /// <param name="title">Название ресурса (имя мастера) (required).</param>
        /// <param name="description">Короткое описание ресурса (в сфере &#x27;Красота&#x27;: должность/специализация мастера).</param>
        /// <param name="information">Подробное описание ресурса.</param>
        /// <param name="rating">Рейтинг по 5-балльной шкале.</param>
        /// <param name="image">image.</param>
        /// <param name="reviewsCount">Количество отзывов.</param>
        public Resource(string id = default(string), OneOfResourceTitle title = default(OneOfResourceTitle), OneOfResourceDescription description = default(OneOfResourceDescription), OneOfResourceInformation information = default(OneOfResourceInformation), decimal? rating = default(decimal?), string image = default(string), decimal? reviewsCount = default(decimal?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Resource and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Resource and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            this.Description = description;
            this.Information = information;
            this.Rating = rating;
            this.Image = image;
            this.ReviewsCount = reviewsCount;
        }
        
        /// <summary>
        /// Уникальный идентификатор ресурса
        /// </summary>
        /// <value>Уникальный идентификатор ресурса</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Название ресурса (имя мастера)
        /// </summary>
        /// <value>Название ресурса (имя мастера)</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public OneOfResourceTitle Title { get; set; }

        /// <summary>
        /// Короткое описание ресурса (в сфере &#x27;Красота&#x27;: должность/специализация мастера)
        /// </summary>
        /// <value>Короткое описание ресурса (в сфере &#x27;Красота&#x27;: должность/специализация мастера)</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public OneOfResourceDescription Description { get; set; }

        /// <summary>
        /// Подробное описание ресурса
        /// </summary>
        /// <value>Подробное описание ресурса</value>
        [DataMember(Name="information", EmitDefaultValue=false)]
        public OneOfResourceInformation Information { get; set; }

        /// <summary>
        /// Рейтинг по 5-балльной шкале
        /// </summary>
        /// <value>Рейтинг по 5-балльной шкале</value>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public decimal? Rating { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Количество отзывов
        /// </summary>
        /// <value>Количество отзывов</value>
        [DataMember(Name="reviewsCount", EmitDefaultValue=false)]
        public decimal? ReviewsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Resource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Information: ").Append(Information).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ReviewsCount: ").Append(ReviewsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Resource);
        }

        /// <summary>
        /// Returns true if Resource instances are equal
        /// </summary>
        /// <param name="input">Instance of Resource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Resource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Information == input.Information ||
                    (this.Information != null &&
                    this.Information.Equals(input.Information))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.ReviewsCount == input.ReviewsCount ||
                    (this.ReviewsCount != null &&
                    this.ReviewsCount.Equals(input.ReviewsCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Information != null)
                    hashCode = hashCode * 59 + this.Information.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.ReviewsCount != null)
                    hashCode = hashCode * 59 + this.ReviewsCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
