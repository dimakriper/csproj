/* 
 * Maps Booking Partners API
 *
 * # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ServicePrice
    /// </summary>
    [DataContract]
        public partial class ServicePrice :  IEquatable<ServicePrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePrice" /> class.
        /// </summary>
        /// <param name="currencyCode">Код валюты в формате ISO 4217 (required).</param>
        /// <param name="range">Диапазон цены. Если цена точная, должен быть массив из двух одинаковых значений. Например, [500, 500]. Если известна только цена &#x27;от&#x27;, передается одно значение, например [500] (required).</param>
        public ServicePrice(string currencyCode = default(string), List<decimal?> range = default(List<decimal?>))
        {
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new InvalidDataException("currencyCode is a required property for ServicePrice and cannot be null");
            }
            else
            {
                this.CurrencyCode = currencyCode;
            }
            // to ensure "range" is required (not null)
            if (range == null)
            {
                throw new InvalidDataException("range is a required property for ServicePrice and cannot be null");
            }
            else
            {
                this.Range = range;
            }
        }
        
        /// <summary>
        /// Код валюты в формате ISO 4217
        /// </summary>
        /// <value>Код валюты в формате ISO 4217</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Диапазон цены. Если цена точная, должен быть массив из двух одинаковых значений. Например, [500, 500]. Если известна только цена &#x27;от&#x27;, передается одно значение, например [500]
        /// </summary>
        /// <value>Диапазон цены. Если цена точная, должен быть массив из двух одинаковых значений. Например, [500, 500]. Если известна только цена &#x27;от&#x27;, передается одно значение, например [500]</value>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public List<decimal?> Range { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServicePrice {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServicePrice);
        }

        /// <summary>
        /// Returns true if ServicePrice instances are equal
        /// </summary>
        /// <param name="input">Instance of ServicePrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServicePrice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Range == input.Range ||
                    this.Range != null &&
                    input.Range != null &&
                    this.Range.SequenceEqual(input.Range)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
