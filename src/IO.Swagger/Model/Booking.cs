/* 
 * Maps Booking Partners API
 *
 * # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Отдельная запись
    /// </summary>
    [DataContract]
        public partial class Booking :  IEquatable<Booking>, IValidatableObject
    {
        /// <summary>
        /// &#x60;created&#x60; — начальный статус сразу после создания записи; &#x60;confirmed&#x60; — запись подтверждена (если предусмотрены подтверждения); &#x60;visited&#x60; — пользователь пришёл, запись состоялась; &#x60;not visited&#x60; — пользователь не пришёл; &#x60;cancelled&#x60; - запись отменена
        /// </summary>
        /// <value>&#x60;created&#x60; — начальный статус сразу после создания записи; &#x60;confirmed&#x60; — запись подтверждена (если предусмотрены подтверждения); &#x60;visited&#x60; — пользователь пришёл, запись состоялась; &#x60;not visited&#x60; — пользователь не пришёл; &#x60;cancelled&#x60; - запись отменена</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Created for value: created
            /// </summary>
            [EnumMember(Value = "created")]
            Created = 1,
            /// <summary>
            /// Enum Confirmed for value: confirmed
            /// </summary>
            [EnumMember(Value = "confirmed")]
            Confirmed = 2,
            /// <summary>
            /// Enum Visited for value: visited
            /// </summary>
            [EnumMember(Value = "visited")]
            Visited = 3,
            /// <summary>
            /// Enum Notvisited for value: not visited
            /// </summary>
            [EnumMember(Value = "not visited")]
            Notvisited = 4,
            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 5        }
        /// <summary>
        /// &#x60;created&#x60; — начальный статус сразу после создания записи; &#x60;confirmed&#x60; — запись подтверждена (если предусмотрены подтверждения); &#x60;visited&#x60; — пользователь пришёл, запись состоялась; &#x60;not visited&#x60; — пользователь не пришёл; &#x60;cancelled&#x60; - запись отменена
        /// </summary>
        /// <value>&#x60;created&#x60; — начальный статус сразу после создания записи; &#x60;confirmed&#x60; — запись подтверждена (если предусмотрены подтверждения); &#x60;visited&#x60; — пользователь пришёл, запись состоялась; &#x60;not visited&#x60; — пользователь не пришёл; &#x60;cancelled&#x60; - запись отменена</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Booking" /> class.
        /// </summary>
        /// <param name="id">Уникальный идентификатор записи (required).</param>
        /// <param name="status">&#x60;created&#x60; — начальный статус сразу после создания записи; &#x60;confirmed&#x60; — запись подтверждена (если предусмотрены подтверждения); &#x60;visited&#x60; — пользователь пришёл, запись состоялась; &#x60;not visited&#x60; — пользователь не пришёл; &#x60;cancelled&#x60; - запись отменена.</param>
        /// <param name="serviceIds">serviceIds (required).</param>
        /// <param name="resourceId">resourceId.</param>
        /// <param name="datetime">datetime (required).</param>
        public Booking(string id = default(string), StatusEnum? status = default(StatusEnum?), List<string> serviceIds = default(List<string>), string resourceId = default(string), string datetime = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Booking and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "serviceIds" is required (not null)
            if (serviceIds == null)
            {
                throw new InvalidDataException("serviceIds is a required property for Booking and cannot be null");
            }
            else
            {
                this.ServiceIds = serviceIds;
            }
            // to ensure "datetime" is required (not null)
            if (datetime == null)
            {
                throw new InvalidDataException("datetime is a required property for Booking and cannot be null");
            }
            else
            {
                this.Datetime = datetime;
            }
            this.Status = status;
            this.ResourceId = resourceId;
        }
        
        /// <summary>
        /// Уникальный идентификатор записи
        /// </summary>
        /// <value>Уникальный идентификатор записи</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Gets or Sets ServiceIds
        /// </summary>
        [DataMember(Name="serviceIds", EmitDefaultValue=false)]
        public List<string> ServiceIds { get; set; }

        /// <summary>
        /// Gets or Sets ResourceId
        /// </summary>
        [DataMember(Name="resourceId", EmitDefaultValue=false)]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or Sets Datetime
        /// </summary>
        [DataMember(Name="datetime", EmitDefaultValue=false)]
        public string Datetime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Booking {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ServiceIds: ").Append(ServiceIds).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Booking);
        }

        /// <summary>
        /// Returns true if Booking instances are equal
        /// </summary>
        /// <param name="input">Instance of Booking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Booking input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ServiceIds == input.ServiceIds ||
                    this.ServiceIds != null &&
                    input.ServiceIds != null &&
                    this.ServiceIds.SequenceEqual(input.ServiceIds)
                ) && 
                (
                    this.ResourceId == input.ResourceId ||
                    (this.ResourceId != null &&
                    this.ResourceId.Equals(input.ResourceId))
                ) && 
                (
                    this.Datetime == input.Datetime ||
                    (this.Datetime != null &&
                    this.Datetime.Equals(input.Datetime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ServiceIds != null)
                    hashCode = hashCode * 59 + this.ServiceIds.GetHashCode();
                if (this.ResourceId != null)
                    hashCode = hashCode * 59 + this.ResourceId.GetHashCode();
                if (this.Datetime != null)
                    hashCode = hashCode * 59 + this.Datetime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
