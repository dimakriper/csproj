/* 
 * Maps Booking Partners API
 *
 * # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// LocalizedTextLocalizedText
    /// </summary>
    [DataContract]
        public partial class LocalizedTextLocalizedText :  IEquatable<LocalizedTextLocalizedText>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizedTextLocalizedText" /> class.
        /// </summary>
        /// <param name="lang">Код языка в ISO 639-1 (required).</param>
        /// <param name="text">text (required).</param>
        public LocalizedTextLocalizedText(string lang = default(string), string text = default(string))
        {
            // to ensure "lang" is required (not null)
            if (lang == null)
            {
                throw new InvalidDataException("lang is a required property for LocalizedTextLocalizedText and cannot be null");
            }
            else
            {
                this.Lang = lang;
            }
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for LocalizedTextLocalizedText and cannot be null");
            }
            else
            {
                this.Text = text;
            }
        }
        
        /// <summary>
        /// Код языка в ISO 639-1
        /// </summary>
        /// <value>Код языка в ISO 639-1</value>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalizedTextLocalizedText {\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocalizedTextLocalizedText);
        }

        /// <summary>
        /// Returns true if LocalizedTextLocalizedText instances are equal
        /// </summary>
        /// <param name="input">Instance of LocalizedTextLocalizedText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalizedTextLocalizedText input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Lang == input.Lang ||
                    (this.Lang != null &&
                    this.Lang.Equals(input.Lang))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Lang != null)
                    hashCode = hashCode * 59 + this.Lang.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
