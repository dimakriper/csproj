/* 
 * Maps Booking Partners API
 *
 * # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// FeedCompany
    /// </summary>
    [DataContract]
        public partial class FeedCompany :  IEquatable<FeedCompany>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedCompany" /> class.
        /// </summary>
        /// <param name="id">Уникальный идентификатор организации (required).</param>
        /// <param name="name">Название организации (required).</param>
        /// <param name="address">Полный адрес (required).</param>
        /// <param name="coordinates">coordinates.</param>
        /// <param name="photos">Фотографии организации.</param>
        /// <param name="phones">Телефоны организации.</param>
        /// <param name="urls">Сайты организации.</param>
        /// <param name="bookingUrl">Ссылка на виджет онлайн-записи партнера.</param>
        /// <param name="services">Список услуг в организации (required).</param>
        /// <param name="resources">Список ресурсов (мастеров) в организации.</param>
        /// <param name="rubrics">Список рубрик организации. В свободном формате, фиксированного списка допустимых рубрик нет. (required).</param>
        public FeedCompany(string id = default(string), OneOfFeedCompanyName name = default(OneOfFeedCompanyName), string address = default(string), FeedCompanyCoordinates coordinates = default(FeedCompanyCoordinates), List<string> photos = default(List<string>), List<string> phones = default(List<string>), List<string> urls = default(List<string>), string bookingUrl = default(string), List<Service> services = default(List<Service>), List<Resource> resources = default(List<Resource>), List<string> rubrics = default(List<string>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for FeedCompany and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for FeedCompany and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for FeedCompany and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            // to ensure "services" is required (not null)
            if (services == null)
            {
                throw new InvalidDataException("services is a required property for FeedCompany and cannot be null");
            }
            else
            {
                this.Services = services;
            }
            // to ensure "rubrics" is required (not null)
            if (rubrics == null)
            {
                throw new InvalidDataException("rubrics is a required property for FeedCompany and cannot be null");
            }
            else
            {
                this.Rubrics = rubrics;
            }
            this.Coordinates = coordinates;
            this.Photos = photos;
            this.Phones = phones;
            this.Urls = urls;
            this.BookingUrl = bookingUrl;
            this.Resources = resources;
        }
        
        /// <summary>
        /// Уникальный идентификатор организации
        /// </summary>
        /// <value>Уникальный идентификатор организации</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Название организации
        /// </summary>
        /// <value>Название организации</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public OneOfFeedCompanyName Name { get; set; }

        /// <summary>
        /// Полный адрес
        /// </summary>
        /// <value>Полный адрес</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Coordinates
        /// </summary>
        [DataMember(Name="coordinates", EmitDefaultValue=false)]
        public FeedCompanyCoordinates Coordinates { get; set; }

        /// <summary>
        /// Фотографии организации
        /// </summary>
        /// <value>Фотографии организации</value>
        [DataMember(Name="photos", EmitDefaultValue=false)]
        public List<string> Photos { get; set; }

        /// <summary>
        /// Телефоны организации
        /// </summary>
        /// <value>Телефоны организации</value>
        [DataMember(Name="phones", EmitDefaultValue=false)]
        public List<string> Phones { get; set; }

        /// <summary>
        /// Сайты организации
        /// </summary>
        /// <value>Сайты организации</value>
        [DataMember(Name="urls", EmitDefaultValue=false)]
        public List<string> Urls { get; set; }

        /// <summary>
        /// Ссылка на виджет онлайн-записи партнера
        /// </summary>
        /// <value>Ссылка на виджет онлайн-записи партнера</value>
        [DataMember(Name="bookingUrl", EmitDefaultValue=false)]
        public string BookingUrl { get; set; }

        /// <summary>
        /// Список услуг в организации
        /// </summary>
        /// <value>Список услуг в организации</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<Service> Services { get; set; }

        /// <summary>
        /// Список ресурсов (мастеров) в организации
        /// </summary>
        /// <value>Список ресурсов (мастеров) в организации</value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<Resource> Resources { get; set; }

        /// <summary>
        /// Список рубрик организации. В свободном формате, фиксированного списка допустимых рубрик нет.
        /// </summary>
        /// <value>Список рубрик организации. В свободном формате, фиксированного списка допустимых рубрик нет.</value>
        [DataMember(Name="rubrics", EmitDefaultValue=false)]
        public List<string> Rubrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeedCompany {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  Photos: ").Append(Photos).Append("\n");
            sb.Append("  Phones: ").Append(Phones).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  BookingUrl: ").Append(BookingUrl).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Rubrics: ").Append(Rubrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeedCompany);
        }

        /// <summary>
        /// Returns true if FeedCompany instances are equal
        /// </summary>
        /// <param name="input">Instance of FeedCompany to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeedCompany input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Coordinates == input.Coordinates ||
                    (this.Coordinates != null &&
                    this.Coordinates.Equals(input.Coordinates))
                ) && 
                (
                    this.Photos == input.Photos ||
                    this.Photos != null &&
                    input.Photos != null &&
                    this.Photos.SequenceEqual(input.Photos)
                ) && 
                (
                    this.Phones == input.Phones ||
                    this.Phones != null &&
                    input.Phones != null &&
                    this.Phones.SequenceEqual(input.Phones)
                ) && 
                (
                    this.Urls == input.Urls ||
                    this.Urls != null &&
                    input.Urls != null &&
                    this.Urls.SequenceEqual(input.Urls)
                ) && 
                (
                    this.BookingUrl == input.BookingUrl ||
                    (this.BookingUrl != null &&
                    this.BookingUrl.Equals(input.BookingUrl))
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    input.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.Rubrics == input.Rubrics ||
                    this.Rubrics != null &&
                    input.Rubrics != null &&
                    this.Rubrics.SequenceEqual(input.Rubrics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Coordinates != null)
                    hashCode = hashCode * 59 + this.Coordinates.GetHashCode();
                if (this.Photos != null)
                    hashCode = hashCode * 59 + this.Photos.GetHashCode();
                if (this.Phones != null)
                    hashCode = hashCode * 59 + this.Phones.GetHashCode();
                if (this.Urls != null)
                    hashCode = hashCode * 59 + this.Urls.GetHashCode();
                if (this.BookingUrl != null)
                    hashCode = hashCode * 59 + this.BookingUrl.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                if (this.Rubrics != null)
                    hashCode = hashCode * 59 + this.Rubrics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
