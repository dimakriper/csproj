/* 
 * Maps Booking Partners API
 *
 * # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Отменить/удалить запись
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns></returns>
        void BookingsBookingIdDelete (string bookingId);

        /// <summary>
        /// Отменить/удалить запись
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BookingsBookingIdDeleteWithHttpInfo (string bookingId);
        /// <summary>
        /// Получить информацию о записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 BookingsBookingIdGet (string bookingId);

        /// <summary>
        /// Получить информацию о записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> BookingsBookingIdGetWithHttpInfo (string bookingId);
        /// <summary>
        /// Обновить запись (перенести на другое время, обновить комментарий)
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;&lt;br/&gt;При изменениях в записи (изменение статуса/перенос/отмена), которые совершаются внутри системы партнера (не инициированы описанным здесь запросом), необходимо отправить PUT-запрос &#x60;https://partner.maps.yandex.net/booking/v1/partners/{partnerId}/{bookingId}&#x60; чтобы синхронизировать состояние записи с личным кабинетом пользователя в Картах
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 BookingsBookingIdPut (BookingUpdate body, string bookingId);

        /// <summary>
        /// Обновить запись (перенести на другое время, обновить комментарий)
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;&lt;br/&gt;При изменениях в записи (изменение статуса/перенос/отмена), которые совершаются внутри системы партнера (не инициированы описанным здесь запросом), необходимо отправить PUT-запрос &#x60;https://partner.maps.yandex.net/booking/v1/partners/{partnerId}/{bookingId}&#x60; чтобы синхронизировать состояние записи с личным кабинетом пользователя в Картах
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> BookingsBookingIdPutWithHttpInfo (BookingUpdate body, string bookingId);
        /// <summary>
        /// Создать запись
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;, \&quot;userPhone\&quot;: \&quot;{userPhone}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 BookingsPost (BookingsBody body);

        /// <summary>
        /// Создать запись
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;, \&quot;userPhone\&quot;: \&quot;{userPhone}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> BookingsPostWithHttpInfo (BookingsBody body);
        /// <summary>
        /// Список доступных для записи дат
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 CompaniesCompanyIdAvailableDatesGet (string companyId, List<string> serviceIds, string from, string to, string resourceId = null);

        /// <summary>
        /// Список доступных для записи дат
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> CompaniesCompanyIdAvailableDatesGetWithHttpInfo (string companyId, List<string> serviceIds, string from, string to, string resourceId = null);
        /// <summary>
        /// Список доступных для записи слотов
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="date"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 CompaniesCompanyIdAvailableTimeSlotsGet (string companyId, List<string> serviceIds, string date, string resourceId = null);

        /// <summary>
        /// Список доступных для записи слотов
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="date"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> CompaniesCompanyIdAvailableTimeSlotsGetWithHttpInfo (string companyId, List<string> serviceIds, string date, string resourceId = null);
        /// <summary>
        /// Список ресурсов, доступных для онлайн-записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 CompaniesCompanyIdResourcesGet (string companyId, List<string> serviceIds = null);

        /// <summary>
        /// Список ресурсов, доступных для онлайн-записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> CompaniesCompanyIdResourcesGetWithHttpInfo (string companyId, List<string> serviceIds = null);
        /// <summary>
        /// Отзывы на ресурс
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;Отзывы запрашиваются, только если у ресурса reviewsCount &gt; 0
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Идентификатор ресурса</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 CompaniesCompanyIdResourcesResourceIdReviewsGet (string companyId, string resourceId);

        /// <summary>
        /// Отзывы на ресурс
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;Отзывы запрашиваются, только если у ресурса reviewsCount &gt; 0
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Идентификатор ресурса</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> CompaniesCompanyIdResourcesResourceIdReviewsGetWithHttpInfo (string companyId, string resourceId);
        /// <summary>
        /// Список услуг, доступных для онлайн-записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CompaniesCompanyIdServicesGet (string companyId, string resourceId = null);

        /// <summary>
        /// Список услуг, доступных для онлайн-записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CompaniesCompanyIdServicesGetWithHttpInfo (string companyId, string resourceId = null);
        /// <summary>
        /// Фид организаций
        /// </summary>
        /// <remarks>
        /// Список всех организаций, подключенных к партнеру, у которых доступна онлайн-запись.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;60s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 CompaniesFeedGet ();

        /// <summary>
        /// Фид организаций
        /// </summary>
        /// <remarks>
        /// Список всех организаций, подключенных к партнеру, у которых доступна онлайн-запись.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;60s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> CompaniesFeedGetWithHttpInfo ();
        /// <summary>
        /// Создать предварительную бронь на слот
        /// </summary>
        /// <remarks>
        /// Эндпоинт не обязателен для реализации, если функциональность предварительного бронирования не предусмотрена.&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 PrebookingsPost (PrebookingsBody body);

        /// <summary>
        /// Создать предварительную бронь на слот
        /// </summary>
        /// <remarks>
        /// Эндпоинт не обязателен для реализации, если функциональность предварительного бронирования не предусмотрена.&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> PrebookingsPostWithHttpInfo (PrebookingsBody body);
        /// <summary>
        /// Отменить/удалить предварительную бронь на слот
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;prebookingId\&quot;: \&quot;{prebookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prebookingId"></param>
        /// <returns></returns>
        void PrebookingsPrebookingIdDelete (string prebookingId);

        /// <summary>
        /// Отменить/удалить предварительную бронь на слот
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;prebookingId\&quot;: \&quot;{prebookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prebookingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PrebookingsPrebookingIdDeleteWithHttpInfo (string prebookingId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Отменить/удалить запись
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BookingsBookingIdDeleteAsync (string bookingId);

        /// <summary>
        /// Отменить/удалить запись
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BookingsBookingIdDeleteAsyncWithHttpInfo (string bookingId);
        /// <summary>
        /// Получить информацию о записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> BookingsBookingIdGetAsync (string bookingId);

        /// <summary>
        /// Получить информацию о записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> BookingsBookingIdGetAsyncWithHttpInfo (string bookingId);
        /// <summary>
        /// Обновить запись (перенести на другое время, обновить комментарий)
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;&lt;br/&gt;При изменениях в записи (изменение статуса/перенос/отмена), которые совершаются внутри системы партнера (не инициированы описанным здесь запросом), необходимо отправить PUT-запрос &#x60;https://partner.maps.yandex.net/booking/v1/partners/{partnerId}/{bookingId}&#x60; чтобы синхронизировать состояние записи с личным кабинетом пользователя в Картах
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> BookingsBookingIdPutAsync (BookingUpdate body, string bookingId);

        /// <summary>
        /// Обновить запись (перенести на другое время, обновить комментарий)
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;&lt;br/&gt;При изменениях в записи (изменение статуса/перенос/отмена), которые совершаются внутри системы партнера (не инициированы описанным здесь запросом), необходимо отправить PUT-запрос &#x60;https://partner.maps.yandex.net/booking/v1/partners/{partnerId}/{bookingId}&#x60; чтобы синхронизировать состояние записи с личным кабинетом пользователя в Картах
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> BookingsBookingIdPutAsyncWithHttpInfo (BookingUpdate body, string bookingId);
        /// <summary>
        /// Создать запись
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;, \&quot;userPhone\&quot;: \&quot;{userPhone}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> BookingsPostAsync (BookingsBody body);

        /// <summary>
        /// Создать запись
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;, \&quot;userPhone\&quot;: \&quot;{userPhone}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> BookingsPostAsyncWithHttpInfo (BookingsBody body);
        /// <summary>
        /// Список доступных для записи дат
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> CompaniesCompanyIdAvailableDatesGetAsync (string companyId, List<string> serviceIds, string from, string to, string resourceId = null);

        /// <summary>
        /// Список доступных для записи дат
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> CompaniesCompanyIdAvailableDatesGetAsyncWithHttpInfo (string companyId, List<string> serviceIds, string from, string to, string resourceId = null);
        /// <summary>
        /// Список доступных для записи слотов
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="date"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> CompaniesCompanyIdAvailableTimeSlotsGetAsync (string companyId, List<string> serviceIds, string date, string resourceId = null);

        /// <summary>
        /// Список доступных для записи слотов
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="date"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> CompaniesCompanyIdAvailableTimeSlotsGetAsyncWithHttpInfo (string companyId, List<string> serviceIds, string date, string resourceId = null);
        /// <summary>
        /// Список ресурсов, доступных для онлайн-записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> CompaniesCompanyIdResourcesGetAsync (string companyId, List<string> serviceIds = null);

        /// <summary>
        /// Список ресурсов, доступных для онлайн-записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CompaniesCompanyIdResourcesGetAsyncWithHttpInfo (string companyId, List<string> serviceIds = null);
        /// <summary>
        /// Отзывы на ресурс
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;Отзывы запрашиваются, только если у ресурса reviewsCount &gt; 0
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Идентификатор ресурса</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> CompaniesCompanyIdResourcesResourceIdReviewsGetAsync (string companyId, string resourceId);

        /// <summary>
        /// Отзывы на ресурс
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;Отзывы запрашиваются, только если у ресурса reviewsCount &gt; 0
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Идентификатор ресурса</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> CompaniesCompanyIdResourcesResourceIdReviewsGetAsyncWithHttpInfo (string companyId, string resourceId);
        /// <summary>
        /// Список услуг, доступных для онлайн-записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CompaniesCompanyIdServicesGetAsync (string companyId, string resourceId = null);

        /// <summary>
        /// Список услуг, доступных для онлайн-записи
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CompaniesCompanyIdServicesGetAsyncWithHttpInfo (string companyId, string resourceId = null);
        /// <summary>
        /// Фид организаций
        /// </summary>
        /// <remarks>
        /// Список всех организаций, подключенных к партнеру, у которых доступна онлайн-запись.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;60s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> CompaniesFeedGetAsync ();

        /// <summary>
        /// Фид организаций
        /// </summary>
        /// <remarks>
        /// Список всех организаций, подключенных к партнеру, у которых доступна онлайн-запись.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;60s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> CompaniesFeedGetAsyncWithHttpInfo ();
        /// <summary>
        /// Создать предварительную бронь на слот
        /// </summary>
        /// <remarks>
        /// Эндпоинт не обязателен для реализации, если функциональность предварительного бронирования не предусмотрена.&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> PrebookingsPostAsync (PrebookingsBody body);

        /// <summary>
        /// Создать предварительную бронь на слот
        /// </summary>
        /// <remarks>
        /// Эндпоинт не обязателен для реализации, если функциональность предварительного бронирования не предусмотрена.&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> PrebookingsPostAsyncWithHttpInfo (PrebookingsBody body);
        /// <summary>
        /// Отменить/удалить предварительную бронь на слот
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;prebookingId\&quot;: \&quot;{prebookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prebookingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PrebookingsPrebookingIdDeleteAsync (string prebookingId);

        /// <summary>
        /// Отменить/удалить предварительную бронь на слот
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;prebookingId\&quot;: \&quot;{prebookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prebookingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PrebookingsPrebookingIdDeleteAsyncWithHttpInfo (string prebookingId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Отменить/удалить запись &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns></returns>
        public void BookingsBookingIdDelete (string bookingId)
        {
             BookingsBookingIdDeleteWithHttpInfo(bookingId);
        }

        /// <summary>
        /// Отменить/удалить запись &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BookingsBookingIdDeleteWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling DefaultApi->BookingsBookingIdDelete");

            var localVarPath = "/bookings/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookingsBookingIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Отменить/удалить запись &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BookingsBookingIdDeleteAsync (string bookingId)
        {
             await BookingsBookingIdDeleteAsyncWithHttpInfo(bookingId);

        }

        /// <summary>
        /// Отменить/удалить запись &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BookingsBookingIdDeleteAsyncWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling DefaultApi->BookingsBookingIdDelete");

            var localVarPath = "/bookings/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookingsBookingIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Получить информацию о записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 BookingsBookingIdGet (string bookingId)
        {
             ApiResponse<InlineResponse2006> localVarResponse = BookingsBookingIdGetWithHttpInfo(bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получить информацию о записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > BookingsBookingIdGetWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling DefaultApi->BookingsBookingIdGet");

            var localVarPath = "/bookings/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookingsBookingIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Получить информацию о записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> BookingsBookingIdGetAsync (string bookingId)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await BookingsBookingIdGetAsyncWithHttpInfo(bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получить информацию о записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> BookingsBookingIdGetAsyncWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling DefaultApi->BookingsBookingIdGet");

            var localVarPath = "/bookings/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookingsBookingIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Обновить запись (перенести на другое время, обновить комментарий) &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;&lt;br/&gt;При изменениях в записи (изменение статуса/перенос/отмена), которые совершаются внутри системы партнера (не инициированы описанным здесь запросом), необходимо отправить PUT-запрос &#x60;https://partner.maps.yandex.net/booking/v1/partners/{partnerId}/{bookingId}&#x60; чтобы синхронизировать состояние записи с личным кабинетом пользователя в Картах
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="bookingId"></param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 BookingsBookingIdPut (BookingUpdate body, string bookingId)
        {
             ApiResponse<InlineResponse2006> localVarResponse = BookingsBookingIdPutWithHttpInfo(body, bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Обновить запись (перенести на другое время, обновить комментарий) &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;&lt;br/&gt;При изменениях в записи (изменение статуса/перенос/отмена), которые совершаются внутри системы партнера (не инициированы описанным здесь запросом), необходимо отправить PUT-запрос &#x60;https://partner.maps.yandex.net/booking/v1/partners/{partnerId}/{bookingId}&#x60; чтобы синхронизировать состояние записи с личным кабинетом пользователя в Картах
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="bookingId"></param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > BookingsBookingIdPutWithHttpInfo (BookingUpdate body, string bookingId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->BookingsBookingIdPut");
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling DefaultApi->BookingsBookingIdPut");

            var localVarPath = "/bookings/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookingsBookingIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Обновить запись (перенести на другое время, обновить комментарий) &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;&lt;br/&gt;При изменениях в записи (изменение статуса/перенос/отмена), которые совершаются внутри системы партнера (не инициированы описанным здесь запросом), необходимо отправить PUT-запрос &#x60;https://partner.maps.yandex.net/booking/v1/partners/{partnerId}/{bookingId}&#x60; чтобы синхронизировать состояние записи с личным кабинетом пользователя в Картах
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="bookingId"></param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> BookingsBookingIdPutAsync (BookingUpdate body, string bookingId)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await BookingsBookingIdPutAsyncWithHttpInfo(body, bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Обновить запись (перенести на другое время, обновить комментарий) &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;bookingId\&quot;: \&quot;{bookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;&lt;br/&gt;При изменениях в записи (изменение статуса/перенос/отмена), которые совершаются внутри системы партнера (не инициированы описанным здесь запросом), необходимо отправить PUT-запрос &#x60;https://partner.maps.yandex.net/booking/v1/partners/{partnerId}/{bookingId}&#x60; чтобы синхронизировать состояние записи с личным кабинетом пользователя в Картах
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="bookingId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> BookingsBookingIdPutAsyncWithHttpInfo (BookingUpdate body, string bookingId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->BookingsBookingIdPut");
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ApiException(400, "Missing required parameter 'bookingId' when calling DefaultApi->BookingsBookingIdPut");

            var localVarPath = "/bookings/{bookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookingId != null) localVarPathParams.Add("bookingId", this.Configuration.ApiClient.ParameterToString(bookingId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookingsBookingIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Создать запись &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;, \&quot;userPhone\&quot;: \&quot;{userPhone}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 BookingsPost (BookingsBody body)
        {
             ApiResponse<InlineResponse2006> localVarResponse = BookingsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Создать запись &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;, \&quot;userPhone\&quot;: \&quot;{userPhone}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > BookingsPostWithHttpInfo (BookingsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->BookingsPost");

            var localVarPath = "/bookings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookingsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Создать запись &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;, \&quot;userPhone\&quot;: \&quot;{userPhone}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> BookingsPostAsync (BookingsBody body)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await BookingsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Создать запись &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;, \&quot;userPhone\&quot;: \&quot;{userPhone}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> BookingsPostAsyncWithHttpInfo (BookingsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->BookingsPost");

            var localVarPath = "/bookings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookingsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Список доступных для записи дат &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 CompaniesCompanyIdAvailableDatesGet (string companyId, List<string> serviceIds, string from, string to, string resourceId = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = CompaniesCompanyIdAvailableDatesGetWithHttpInfo(companyId, serviceIds, from, to, resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Список доступных для записи дат &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > CompaniesCompanyIdAvailableDatesGetWithHttpInfo (string companyId, List<string> serviceIds, string from, string to, string resourceId = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->CompaniesCompanyIdAvailableDatesGet");
            // verify the required parameter 'serviceIds' is set
            if (serviceIds == null)
                throw new ApiException(400, "Missing required parameter 'serviceIds' when calling DefaultApi->CompaniesCompanyIdAvailableDatesGet");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling DefaultApi->CompaniesCompanyIdAvailableDatesGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling DefaultApi->CompaniesCompanyIdAvailableDatesGet");

            var localVarPath = "/companies/{companyId}/available_dates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (serviceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceIds[]", serviceIds)); // query parameter
            if (resourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceId", resourceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdAvailableDatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Список доступных для записи дат &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> CompaniesCompanyIdAvailableDatesGetAsync (string companyId, List<string> serviceIds, string from, string to, string resourceId = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = await CompaniesCompanyIdAvailableDatesGetAsyncWithHttpInfo(companyId, serviceIds, from, to, resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Список доступных для записи дат &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> CompaniesCompanyIdAvailableDatesGetAsyncWithHttpInfo (string companyId, List<string> serviceIds, string from, string to, string resourceId = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->CompaniesCompanyIdAvailableDatesGet");
            // verify the required parameter 'serviceIds' is set
            if (serviceIds == null)
                throw new ApiException(400, "Missing required parameter 'serviceIds' when calling DefaultApi->CompaniesCompanyIdAvailableDatesGet");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling DefaultApi->CompaniesCompanyIdAvailableDatesGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling DefaultApi->CompaniesCompanyIdAvailableDatesGet");

            var localVarPath = "/companies/{companyId}/available_dates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (serviceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceIds[]", serviceIds)); // query parameter
            if (resourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceId", resourceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdAvailableDatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Список доступных для записи слотов &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="date"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 CompaniesCompanyIdAvailableTimeSlotsGet (string companyId, List<string> serviceIds, string date, string resourceId = null)
        {
             ApiResponse<InlineResponse2005> localVarResponse = CompaniesCompanyIdAvailableTimeSlotsGetWithHttpInfo(companyId, serviceIds, date, resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Список доступных для записи слотов &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="date"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse< InlineResponse2005 > CompaniesCompanyIdAvailableTimeSlotsGetWithHttpInfo (string companyId, List<string> serviceIds, string date, string resourceId = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->CompaniesCompanyIdAvailableTimeSlotsGet");
            // verify the required parameter 'serviceIds' is set
            if (serviceIds == null)
                throw new ApiException(400, "Missing required parameter 'serviceIds' when calling DefaultApi->CompaniesCompanyIdAvailableTimeSlotsGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->CompaniesCompanyIdAvailableTimeSlotsGet");

            var localVarPath = "/companies/{companyId}/available_time_slots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (serviceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceIds[]", serviceIds)); // query parameter
            if (resourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceId", resourceId)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdAvailableTimeSlotsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Список доступных для записи слотов &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="date"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> CompaniesCompanyIdAvailableTimeSlotsGetAsync (string companyId, List<string> serviceIds, string date, string resourceId = null)
        {
             ApiResponse<InlineResponse2005> localVarResponse = await CompaniesCompanyIdAvailableTimeSlotsGetAsyncWithHttpInfo(companyId, serviceIds, date, resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Список доступных для записи слотов &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем</param>
        /// <param name="date"></param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> CompaniesCompanyIdAvailableTimeSlotsGetAsyncWithHttpInfo (string companyId, List<string> serviceIds, string date, string resourceId = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->CompaniesCompanyIdAvailableTimeSlotsGet");
            // verify the required parameter 'serviceIds' is set
            if (serviceIds == null)
                throw new ApiException(400, "Missing required parameter 'serviceIds' when calling DefaultApi->CompaniesCompanyIdAvailableTimeSlotsGet");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling DefaultApi->CompaniesCompanyIdAvailableTimeSlotsGet");

            var localVarPath = "/companies/{companyId}/available_time_slots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (serviceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceIds[]", serviceIds)); // query parameter
            if (resourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceId", resourceId)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdAvailableTimeSlotsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Список ресурсов, доступных для онлайн-записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 CompaniesCompanyIdResourcesGet (string companyId, List<string> serviceIds = null)
        {
             ApiResponse<InlineResponse2002> localVarResponse = CompaniesCompanyIdResourcesGetWithHttpInfo(companyId, serviceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Список ресурсов, доступных для онлайн-записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > CompaniesCompanyIdResourcesGetWithHttpInfo (string companyId, List<string> serviceIds = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->CompaniesCompanyIdResourcesGet");

            var localVarPath = "/companies/{companyId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (serviceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceIds[]", serviceIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdResourcesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Список ресурсов, доступных для онлайн-записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> CompaniesCompanyIdResourcesGetAsync (string companyId, List<string> serviceIds = null)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await CompaniesCompanyIdResourcesGetAsyncWithHttpInfo(companyId, serviceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Список ресурсов, доступных для онлайн-записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="serviceIds">Фильтрация по списку услуг, выбранных пользователем (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CompaniesCompanyIdResourcesGetAsyncWithHttpInfo (string companyId, List<string> serviceIds = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->CompaniesCompanyIdResourcesGet");

            var localVarPath = "/companies/{companyId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (serviceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "serviceIds[]", serviceIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdResourcesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Отзывы на ресурс &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;Отзывы запрашиваются, только если у ресурса reviewsCount &gt; 0
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Идентификатор ресурса</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 CompaniesCompanyIdResourcesResourceIdReviewsGet (string companyId, string resourceId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = CompaniesCompanyIdResourcesResourceIdReviewsGetWithHttpInfo(companyId, resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Отзывы на ресурс &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;Отзывы запрашиваются, только если у ресурса reviewsCount &gt; 0
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Идентификатор ресурса</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > CompaniesCompanyIdResourcesResourceIdReviewsGetWithHttpInfo (string companyId, string resourceId)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->CompaniesCompanyIdResourcesResourceIdReviewsGet");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->CompaniesCompanyIdResourcesResourceIdReviewsGet");

            var localVarPath = "/companies/{companyId}/resources/{resourceId}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdResourcesResourceIdReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Отзывы на ресурс &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;Отзывы запрашиваются, только если у ресурса reviewsCount &gt; 0
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Идентификатор ресурса</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> CompaniesCompanyIdResourcesResourceIdReviewsGetAsync (string companyId, string resourceId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await CompaniesCompanyIdResourcesResourceIdReviewsGetAsyncWithHttpInfo(companyId, resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Отзывы на ресурс &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;&lt;br/&gt;Отзывы запрашиваются, только если у ресурса reviewsCount &gt; 0
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Идентификатор ресурса</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> CompaniesCompanyIdResourcesResourceIdReviewsGetAsyncWithHttpInfo (string companyId, string resourceId)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->CompaniesCompanyIdResourcesResourceIdReviewsGet");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->CompaniesCompanyIdResourcesResourceIdReviewsGet");

            var localVarPath = "/companies/{companyId}/resources/{resourceId}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdResourcesResourceIdReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Список услуг, доступных для онлайн-записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CompaniesCompanyIdServicesGet (string companyId, string resourceId = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CompaniesCompanyIdServicesGetWithHttpInfo(companyId, resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Список услуг, доступных для онлайн-записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CompaniesCompanyIdServicesGetWithHttpInfo (string companyId, string resourceId = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->CompaniesCompanyIdServicesGet");

            var localVarPath = "/companies/{companyId}/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (resourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceId", resourceId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdServicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Список услуг, доступных для онлайн-записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CompaniesCompanyIdServicesGetAsync (string companyId, string resourceId = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CompaniesCompanyIdServicesGetAsyncWithHttpInfo(companyId, resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Список услуг, доступных для онлайн-записи &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Идентификатор организации</param>
        /// <param name="resourceId">Фильтрация по ресурсу (мастеру) (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CompaniesCompanyIdServicesGetAsyncWithHttpInfo (string companyId, string resourceId = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling DefaultApi->CompaniesCompanyIdServicesGet");

            var localVarPath = "/companies/{companyId}/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (resourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceId", resourceId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdServicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Фид организаций Список всех организаций, подключенных к партнеру, у которых доступна онлайн-запись.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;60s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 CompaniesFeedGet ()
        {
             ApiResponse<InlineResponse200> localVarResponse = CompaniesFeedGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Фид организаций Список всех организаций, подключенных к партнеру, у которых доступна онлайн-запись.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;60s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > CompaniesFeedGetWithHttpInfo ()
        {

            var localVarPath = "/companies/feed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesFeedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Фид организаций Список всех организаций, подключенных к партнеру, у которых доступна онлайн-запись.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;60s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> CompaniesFeedGetAsync ()
        {
             ApiResponse<InlineResponse200> localVarResponse = await CompaniesFeedGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Фид организаций Список всех организаций, подключенных к партнеру, у которых доступна онлайн-запись.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;60s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> CompaniesFeedGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/companies/feed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesFeedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Создать предварительную бронь на слот Эндпоинт не обязателен для реализации, если функциональность предварительного бронирования не предусмотрена.&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 PrebookingsPost (PrebookingsBody body)
        {
             ApiResponse<InlineResponse2007> localVarResponse = PrebookingsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Создать предварительную бронь на слот Эндпоинт не обязателен для реализации, если функциональность предварительного бронирования не предусмотрена.&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > PrebookingsPostWithHttpInfo (PrebookingsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PrebookingsPost");

            var localVarPath = "/prebookings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrebookingsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Создать предварительную бронь на слот Эндпоинт не обязателен для реализации, если функциональность предварительного бронирования не предусмотрена.&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> PrebookingsPostAsync (PrebookingsBody body)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await PrebookingsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Создать предварительную бронь на слот Эндпоинт не обязателен для реализации, если функциональность предварительного бронирования не предусмотрена.&lt;br/&gt;&lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;companyId\&quot;: \&quot;{companyId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> PrebookingsPostAsyncWithHttpInfo (PrebookingsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PrebookingsPost");

            var localVarPath = "/prebookings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrebookingsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Отменить/удалить предварительную бронь на слот &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;prebookingId\&quot;: \&quot;{prebookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prebookingId"></param>
        /// <returns></returns>
        public void PrebookingsPrebookingIdDelete (string prebookingId)
        {
             PrebookingsPrebookingIdDeleteWithHttpInfo(prebookingId);
        }

        /// <summary>
        /// Отменить/удалить предварительную бронь на слот &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;prebookingId\&quot;: \&quot;{prebookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prebookingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PrebookingsPrebookingIdDeleteWithHttpInfo (string prebookingId)
        {
            // verify the required parameter 'prebookingId' is set
            if (prebookingId == null)
                throw new ApiException(400, "Missing required parameter 'prebookingId' when calling DefaultApi->PrebookingsPrebookingIdDelete");

            var localVarPath = "/prebookings/{prebookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prebookingId != null) localVarPathParams.Add("prebookingId", this.Configuration.ApiClient.ParameterToString(prebookingId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrebookingsPrebookingIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Отменить/удалить предварительную бронь на слот &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;prebookingId\&quot;: \&quot;{prebookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prebookingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PrebookingsPrebookingIdDeleteAsync (string prebookingId)
        {
             await PrebookingsPrebookingIdDeleteAsyncWithHttpInfo(prebookingId);

        }

        /// <summary>
        /// Отменить/удалить предварительную бронь на слот &lt;b&gt;JWT payload:&lt;/b&gt; &#x60;{\&quot;prebookingId\&quot;: \&quot;{prebookingId}\&quot;}&#x60;&lt;br/&gt;&lt;b&gt;Timeout:&lt;/b&gt; &#x60;5s&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prebookingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PrebookingsPrebookingIdDeleteAsyncWithHttpInfo (string prebookingId)
        {
            // verify the required parameter 'prebookingId' is set
            if (prebookingId == null)
                throw new ApiException(400, "Missing required parameter 'prebookingId' when calling DefaultApi->PrebookingsPrebookingIdDelete");

            var localVarPath = "/prebookings/{prebookingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prebookingId != null) localVarPathParams.Add("prebookingId", this.Configuration.ApiClient.ParameterToString(prebookingId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PrebookingsPrebookingIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
